@startuml

Estragon "1..*" -- "1..1" Priority : has
User "0..*" -- "0..*" Godot : has
SkillCompetenceLevel "0..*" -- "1..1" CompetenceLevel
Todo "0..*" -- "1..1" Priority : has
Todo "*" -- "1" ClosedState : has
Estragon "0..1" -- "0..1" Estragon : waits for
Godot "0..1" -- "1..*" Estragon : consists of
Estragon "1..1" -- "1..*" Todo : has
User "0..1" -- "1..*" SkillCompetenceLevel : has
SkillCompetenceLevel "1..1" -- "1..*" Skill
(Estragon, User) .. EstragonMember

class Post{
 -id:integer
 -title:String
 -slug:String
 -excerpt:String
 -date:DateTime
 -body:String
}

class User {
 -id:integer
 -email:String
 -first_name:String
 -last_name:String
 -birth_date:Date
 -password:String
 -user_image:String
 -created_at:Date
 -updated_at:Date
}

class Skill {
 -id:integer
 -title:String
 -body:String
 -description:string
 -icon_image:String
 -created_at:Date
 -updated_at:Date
}

class CompetenceLevel {
    -id:integer
    -order:int
    -title:String
    -description:String
}

class SkillCompetenceLevel {
    - id:integer
    - user_id:integer
    - skill_id:integer[howto -> unique to user?]
    - competencelevel_id:integer
}

class Godot{
   -id:integer
   -initiator:User
   -members:User[]
   -creation_date:Date
   -due_date:Date
   -closed_date:Date
   -title:String
   -description:String
   -order:integer
   -created_at:Date
   -updated_at:Date
}

class EstragonMember{
    -id:integer
    -User_id:integer
    -Estragon_id:integer
    -MemberRole:String
}

class Estragon{
 -id:integer
 -priority_id:integer
 -due_date:Date
 -closed_date:Date
 -title:String
 -description:String
 -created_at:Date
 -updated_at:Date
 -successor_id:integer
}

class Priority{
 -id:integer
 -title:String
 -order:Enum
}

class ClosedState{
 -id:integer
 -title:String
}

class Todo{
 -id:integer
 -priority_id:integer
 -title:String
 -body:Title
 -creation_date:Date
 -due_date:Date
 -closed_state_id:integer
 -closing_comment:String
 -active:Bool
}



@enduml
Are the cardinalities OK?
how to write referential integrity in plantuml syntax?

active and closed_date are here by intent.
I can set a task inactive but I dont want to mark it done,
its only marked done(closed) if it has a closed_date(not null or in the past?)

CLOSED_STATES:
NOT(initial)
UNTOUCHED
PARTIALLYDONE
COMPLETED
--Closing without closing comment should only be possible for COMPLETED

How will I concatenate Estragons to each other so they are "waterfalling"?

Should there be just a softdelete or do I want to have a closed date and a deletionDate,
and say: if deletionDate is not NULL dont consider them existent.
Do enums still often lead to problems or is that an old tale from pre 2010 or so?

If I want to have a variable amount of priorities?
How do i restrict/constrain that down to 10max

ICON: Willow Tree

It seems like with eloquent I would have to handle the process of creating models(classes)
for my app just more like designing a database than an OOP-program.
like when an object would actually HAVE(incorporate) another object it seems to be convention
that you already create a class thats,
like a join-table with both concerning objects id's together as its primary key candidates

'CompetenceLevel als Zwischentabelle -> Skill in der Auspraegung 'X'
Eventuell wollen wir auch die Posts behalten/integrieren um fuer jeden Sprint/Estragon dann auch Posts anlegen zu koennen,
 um wichtige Informationen zum Fortschritt des Sprints festzuhalten.
 Involved-Verknuepfung - um automatisch Nachrichten(welcher Art auch immer),
  an involvierte Co-Worker zu senden,
wenn Fortschritt od. Erkenntnisse zu dem Estragon gepostet werden.

